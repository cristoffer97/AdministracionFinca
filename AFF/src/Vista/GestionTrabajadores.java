package Vista;

import Modelo.Cuadrillas;
import Modelo.Trabajadores;
import controlador.Configuracion;
import controlador.ConsultasMYSQL;
import controlador.ConsultasTrabajadores;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Cristoffer
 */
public class GestionTrabajadores extends javax.swing.JFrame implements Configuracion{

    private static int codtrabaj, telefono, cuadrilla, tipotrabajador;
    private static String nombre;
    private static String apellido;
    private static boolean podador;
    private DefaultComboBoxModel modeloCuadrilla = new DefaultComboBoxModel<>();
    private DefaultComboBoxModel modeloTipoTrabajo = new DefaultComboBoxModel<>();
    private ArrayList<Cuadrillas> listaCuadrilla = new ArrayList<Cuadrillas>();
    private ArrayList<String> listaTipos = new ArrayList<>();
    private static ArrayList<Trabajadores> lista_trabajabadores = new ArrayList<>();
    private DefaultTableModel modeloTabla = new DefaultTableModel();
    ConsultasMYSQL consultas1 = new ConsultasMYSQL();
    ConsultasTrabajadores consultas = new ConsultasTrabajadores();
     JTableHeader th;

    public GestionTrabajadores() {

        
        comprobarCuadrillas();
        comprobarTiposTrabajadores();
        sacarTrabajadoresdeBD();
        agregarModeloTabla();
        initComponents();
        //configuracionTabla();       
        setLocationRelativeTo(null);
        jcomboCuadrilla.addItem("Seleccione Cuadrilla");
        jcomboTipo.addItem("Seleccione tipo");
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/icono.jpg")).getImage());
        llenarModeloComboBoxCuadrilla();
        llenarModeloComboBoxTiposTrabajadores();
        ActualizarTabla();
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        Titulo = new javax.swing.JLabel();
        btnoBuscar = new javax.swing.JButton();
        btnoModificar = new javax.swing.JButton();
        btnoInsertar = new javax.swing.JButton();
        btnoCerrar = new javax.swing.JButton();
        btnoBaja = new javax.swing.JButton();
        etiquetaCuadrilla = new javax.swing.JLabel();
        etiquetaApellidos = new javax.swing.JLabel();
        etiquetaCodigo = new javax.swing.JLabel();
        cajaCodigo = new javax.swing.JTextField();
        cajaApellidos = new javax.swing.JTextField();
        jcomboCuadrilla = new javax.swing.JComboBox<>();
        chechPodador = new javax.swing.JCheckBox();
        etiquetaTipo = new javax.swing.JLabel();
        etiquetaTelefono = new javax.swing.JLabel();
        etiquetaNombre = new javax.swing.JLabel();
        cajaNombre = new javax.swing.JTextField();
        cajaTelefono = new javax.swing.JTextField();
        jcomboTipo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        tituloTabla = new javax.swing.JLabel();
        btnoLimpiarCampos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestion de Trabajadores");
        setResizable(false);

        panelPrincipal.setBackground(new java.awt.Color(51, 153, 0));
        panelPrincipal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        panelPrincipal.setForeground(new java.awt.Color(255, 255, 255));

        Titulo.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        Titulo.setForeground(new java.awt.Color(255, 255, 255));
        Titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titulo.setText("GESTION DE LOS TRABAJADORES");

        btnoBuscar.setBackground(new java.awt.Color(0, 0, 0));
        btnoBuscar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnoBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnoBuscar.setText("Buscar");
        btnoBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnoBuscarActionPerformed(evt);
            }
        });

        btnoModificar.setBackground(new java.awt.Color(0, 0, 0));
        btnoModificar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnoModificar.setForeground(new java.awt.Color(255, 255, 255));
        btnoModificar.setText("Modificar");
        btnoModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnoModificarActionPerformed(evt);
            }
        });

        btnoInsertar.setBackground(new java.awt.Color(0, 0, 0));
        btnoInsertar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnoInsertar.setForeground(new java.awt.Color(255, 255, 255));
        btnoInsertar.setText("Insertar");
        btnoInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnoInsertarActionPerformed(evt);
            }
        });

        btnoCerrar.setBackground(new java.awt.Color(0, 0, 0));
        btnoCerrar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnoCerrar.setForeground(new java.awt.Color(255, 255, 255));
        btnoCerrar.setText("Cerrar");
        btnoCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnoCerrarActionPerformed(evt);
            }
        });

        btnoBaja.setBackground(new java.awt.Color(0, 0, 0));
        btnoBaja.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnoBaja.setForeground(new java.awt.Color(255, 255, 255));
        btnoBaja.setText("Baja");
        btnoBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnoBajaActionPerformed(evt);
            }
        });

        etiquetaCuadrilla.setBackground(new java.awt.Color(255, 255, 255));
        etiquetaCuadrilla.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        etiquetaCuadrilla.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaCuadrilla.setText("Cuadrilla");

        etiquetaApellidos.setBackground(new java.awt.Color(255, 255, 255));
        etiquetaApellidos.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        etiquetaApellidos.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaApellidos.setText("Apellidos");

        etiquetaCodigo.setBackground(new java.awt.Color(255, 255, 255));
        etiquetaCodigo.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        etiquetaCodigo.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaCodigo.setText("Codigo");

        cajaCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cajaCodigoActionPerformed(evt);
            }
        });

        cajaApellidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cajaApellidosActionPerformed(evt);
            }
        });

        jcomboCuadrilla.setModel(modeloCuadrilla);
        jcomboCuadrilla.setSelectedItem(modeloCuadrilla);
        jcomboCuadrilla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcomboCuadrillaActionPerformed(evt);
            }
        });

        chechPodador.setBackground(new java.awt.Color(51, 153, 0));
        chechPodador.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        chechPodador.setForeground(new java.awt.Color(255, 255, 255));
        chechPodador.setText("Â¿Sabe Podar?");

        etiquetaTipo.setBackground(new java.awt.Color(255, 255, 255));
        etiquetaTipo.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        etiquetaTipo.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaTipo.setText("Tipo");

        etiquetaTelefono.setBackground(new java.awt.Color(255, 255, 255));
        etiquetaTelefono.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        etiquetaTelefono.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaTelefono.setText("Telefono");

        etiquetaNombre.setBackground(new java.awt.Color(255, 255, 255));
        etiquetaNombre.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        etiquetaNombre.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaNombre.setText("Nombre");

        cajaNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cajaNombreActionPerformed(evt);
            }
        });

        cajaTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cajaTelefonoActionPerformed(evt);
            }
        });

        jcomboTipo.setModel(modeloTipoTrabajo);
        jcomboTipo.setSelectedItem(modeloTipoTrabajo);

        tabla.setModel(modeloTabla);
        tabla.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tabla.setSelectionForeground(new java.awt.Color(255, 255, 255));
        ListSelectionListener oyenteSeleccion=new ListSelectionListener(){
            @Override
            public void valueChanged(ListSelectionEvent e){
                if(e.getValueIsAdjusting()){
                    int filaSeleccionada=tabla.getSelectedRow();
                    String codigo=(String) modeloTabla.getValueAt(filaSeleccionada, 0);
                    String nombre=(String) modeloTabla.getValueAt(filaSeleccionada, 1);
                    String apellido=(String) modeloTabla.getValueAt(filaSeleccionada, 2);
                    String telefono=(String) modeloTabla.getValueAt(filaSeleccionada, 3);
                    String cua=(String) modeloTabla.getValueAt(filaSeleccionada, 4);
                    String Podador=(String) modeloTabla.getValueAt(filaSeleccionada, 5);
                    String Tipo=(String) modeloTabla.getValueAt(filaSeleccionada, 6);

                    cajaCodigo.setText(codigo);
                    cajaNombre.setText(nombre);
                    cajaApellidos.setText(apellido);
                    cajaTelefono.setText(telefono);
                    /*
                    for (Cuadrillas cuadrillas : listaCuadrilla) {
                        if(cua.equals(cuadrillas.getCodigoCuadrilla())){
                            jcomboCuadrilla.setSelectedIndex(1);
                        }
                    }*/
                    /*int posicionTipo = listaTipos.indexOf(Tipo);
                    jcomboTipo.setSelectedIndex(posicionTipo);*/
                    switch (Podador) {
                        case "Si":

                        chechPodador.setSelected(true);                
                        break;            
                        case "No":

                        chechPodador.setSelected(false);
                    }
                    switch (Tipo) {
                        case "Encargado":

                        jcomboTipo.setSelectedIndex(1);
                        break;
                        case "Manijero":
                        jcomboTipo.setSelectedIndex(2);
                        break;
                        case "Tractorista":
                        jcomboTipo.setSelectedIndex(3);
                        break;
                        case "Jornalero":
                        jcomboTipo.setSelectedIndex(4);
                        break;
                        case "Perito":
                        jcomboTipo.setSelectedIndex(5);
                        break;
                        default:
                        break;
                    }

                }

            }
        };
        tabla.getSelectionModel().addListSelectionListener(oyenteSeleccion);
        jScrollPane1.setViewportView(tabla);

        tituloTabla.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        tituloTabla.setForeground(new java.awt.Color(255, 255, 255));
        tituloTabla.setText("LISTA DE TRABAJADORES");

        btnoLimpiarCampos.setBackground(new java.awt.Color(0, 0, 0));
        btnoLimpiarCampos.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnoLimpiarCampos.setForeground(new java.awt.Color(255, 255, 255));
        btnoLimpiarCampos.setText("Limpiar");
        btnoLimpiarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnoLimpiarCamposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chechPodador)
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(etiquetaApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(etiquetaCodigo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(etiquetaCuadrilla, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jcomboCuadrilla, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(cajaApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(cajaCodigo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(btnoInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnoModificar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnoBuscar)))
                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnoLimpiarCampos))
                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                                .addGap(24, 24, 24)
                                                .addComponent(etiquetaNombre)
                                                .addGap(22, 22, 22)
                                                .addComponent(cajaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                                .addGap(20, 20, 20)
                                                .addComponent(etiquetaTelefono)
                                                .addGap(18, 18, 18)
                                                .addComponent(cajaTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                                        .addGap(0, 0, Short.MAX_VALUE)
                                                        .addComponent(etiquetaTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createSequentialGroup()
                                                        .addComponent(btnoCerrar)
                                                        .addGap(18, 18, 18)))
                                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnoBaja)
                                                    .addComponent(jcomboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(0, 18, Short.MAX_VALUE)))))
                        .addGap(0, 27, Short.MAX_VALUE))
                    .addComponent(Titulo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addComponent(tituloTabla)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addComponent(Titulo)
                .addGap(18, 18, 18)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(etiquetaCodigo)
                        .addComponent(cajaCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(etiquetaNombre))
                    .addComponent(cajaNombre))
                .addGap(22, 22, 22)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cajaApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(etiquetaApellidos))
                    .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cajaTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(etiquetaTelefono)))
                .addGap(18, 18, 18)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jcomboCuadrilla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(etiquetaCuadrilla))
                    .addComponent(jcomboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(etiquetaTipo))
                .addGap(8, 8, 8)
                .addComponent(chechPodador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnoInsertar)
                    .addComponent(btnoModificar)
                    .addComponent(btnoBuscar)
                    .addComponent(btnoCerrar)
                    .addComponent(btnoBaja)
                    .addComponent(btnoLimpiarCampos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tituloTabla)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cajaCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cajaCodigoActionPerformed
    }//GEN-LAST:event_cajaCodigoActionPerformed

    private void cajaApellidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cajaApellidosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cajaApellidosActionPerformed

    private void cajaNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cajaNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cajaNombreActionPerformed

    private void cajaTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cajaTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cajaTelefonoActionPerformed
    /**
     * Con este metodo damos de alta a un trabajador
     *
     * @param evt
     */
    private void btnoInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnoInsertarActionPerformed
        try {
            String codigo = cajaCodigo.getText();
            codtrabaj = Integer.parseInt(codigo);
            nombre = cajaNombre.getText();
            apellido = cajaApellidos.getText();
            String tel = cajaTelefono.getText();
            telefono = Integer.parseInt(tel);

            String cua = (String) jcomboCuadrilla.getSelectedItem().toString();
            for (Cuadrillas cuadrillas : listaCuadrilla) {
                if (cua.equals(cuadrillas.toString())) {
                    cuadrilla = cuadrillas.getCodigoCuadrilla();
                }
            }

            String tipo = (String) jcomboTipo.getSelectedItem().toString();

            int posicionTipo = listaTipos.indexOf(tipo);
            tipotrabajador = posicionTipo;
                
            if (chechPodador.isSelected() == true) {
                podador = true;
            } else {
                podador = false;
            }

            if (consultas.IngresarTrabajador(codtrabaj, nombre, apellido, telefono, cuadrilla, podador, tipotrabajador) == true) {
                JOptionPane.showMessageDialog(null, "El trabajador se ha guardado");                
                ActualizarTabla();

            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Revise los datos del empleado", "Error al ingresar los datos", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnoInsertarActionPerformed
    /**
     * Con este metodo modificamos al trabajador
     *
     * @param evt
     */
    private void btnoModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnoModificarActionPerformed
        try {
            String codigo = cajaCodigo.getText();
            codtrabaj = Integer.parseInt(codigo);
            nombre = cajaNombre.getText();
            apellido = cajaApellidos.getText();
            String tel = cajaTelefono.getText();
            telefono = Integer.parseInt(tel);
            String cua = (String) jcomboCuadrilla.getSelectedItem().toString();
            for (Cuadrillas cuadrillas : listaCuadrilla) {
                if (cua.equals(cuadrillas.toString())) {
                    cuadrilla = cuadrillas.getCodigoCuadrilla();
                    
                }
            }
            String tipo = (String) jcomboTipo.getSelectedItem().toString();
            switch (tipo) {
                case "Encargado":
                    tipotrabajador = 1;
                    break;
                case "Manijero":
                    tipotrabajador = 2;
                    break;
                case "Tractorista":
                    tipotrabajador = 3;
                    break;
                case "Jornalero":
                    tipotrabajador = 4;
                    break;
                case "Perito":
                    tipotrabajador = 5;
                    break;
                default:
                    break;
            }
            
            
            

            if (chechPodador.isSelected() == true) {
                podador = true;
            } else {
                podador = false;
            }

            if (consultas.actualizarDatosdeTrabajador(codtrabaj, nombre, apellido, telefono, cuadrilla, podador, tipotrabajador) == true) {
                JOptionPane.showMessageDialog(null, "Se ha actualizado los datos del trabajador");                
                ActualizarTabla();
            } else {
                JOptionPane.showMessageDialog(null, "No se ha podido actualizar los datos");
                limpiarcajas();
                ActualizarTabla();
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Revise los datos del empleado", "Error al modificar los datos", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnoModificarActionPerformed
    /**
     * Con este metodo borramos al trabajador
     *
     * @param evt
     */
    private void btnoBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnoBajaActionPerformed
        try {
            String codigo = cajaCodigo.getText();
            codtrabaj = Integer.parseInt(codigo);

            if (consultas.BorrarTrabajador(codtrabaj) == true) {
                JOptionPane.showMessageDialog(null, "Se ha dado de baja al trabajador");
                ActualizarTabla();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Revisa el Codigo del trabajador", "Error al dar de baja", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnoBajaActionPerformed
    /**
     * Con este meto do Cerramos la ventana
     *
     * @param evt
     */
    private void btnoCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnoCerrarActionPerformed
        VentanaTareas vt = new VentanaTareas();
        vt.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnoCerrarActionPerformed
    /**
     * Con este metodo realizamos la busqueda del trabajador solicitado
     *
     * @param evt
     */
    private void btnoBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnoBuscarActionPerformed
        try {
            String codigo = cajaCodigo.getText();
            int codigodTrabajador = Integer.parseInt(codigo);
            Trabajadores trabajador = consultas.buscarTrabajador(codigodTrabajador);

            cajaCodigo.setText(codigo);
            cajaNombre.setText(trabajador.getNombre());
            cajaApellidos.setText(trabajador.getApellidos());
            cajaTelefono.setText(String.valueOf(trabajador.getTelefono()));
                        
            int posicionTipo = listaTipos.indexOf(trabajador.getTipoTrabajador());
            jcomboTipo.setSelectedIndex(posicionTipo);


        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Revisa el Codigo del trabajador", "Error al buscar", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnoBuscarActionPerformed
    /**
     * Con este metodo limpiamos los campos despues de hacer alguna tarea
     *
     * @param evt
     */
    private void btnoLimpiarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnoLimpiarCamposActionPerformed
        limpiarcajas();


    }//GEN-LAST:event_btnoLimpiarCamposActionPerformed

    private void jcomboCuadrillaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcomboCuadrillaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcomboCuadrillaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        GestionTrabajadores gt = new GestionTrabajadores();
        gt.setVisible(true);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionTrabajadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionTrabajadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionTrabajadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionTrabajadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
 /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionTrabajadores().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Titulo;
    private javax.swing.JButton btnoBaja;
    private javax.swing.JButton btnoBuscar;
    private javax.swing.JButton btnoCerrar;
    private javax.swing.JButton btnoInsertar;
    private javax.swing.JButton btnoLimpiarCampos;
    private javax.swing.JButton btnoModificar;
    private javax.swing.JTextField cajaApellidos;
    private javax.swing.JTextField cajaCodigo;
    private javax.swing.JTextField cajaNombre;
    private javax.swing.JTextField cajaTelefono;
    private javax.swing.JCheckBox chechPodador;
    private javax.swing.JLabel etiquetaApellidos;
    private javax.swing.JLabel etiquetaCodigo;
    private javax.swing.JLabel etiquetaCuadrilla;
    private javax.swing.JLabel etiquetaNombre;
    private javax.swing.JLabel etiquetaTelefono;
    private javax.swing.JLabel etiquetaTipo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcomboCuadrilla;
    private javax.swing.JComboBox<String> jcomboTipo;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JTable tabla;
    private javax.swing.JLabel tituloTabla;
    // End of variables declaration//GEN-END:variables
/**
     * Rellenamos el combobox con un arraylist de todas las cuadrillas que
     * tenemos actualmente en nuestra base
     */
    private void llenarModeloComboBoxCuadrilla() {

        for (Cuadrillas cuadrillas : listaCuadrilla) {
            modeloCuadrilla.addElement(cuadrillas);

        }
    }

    /**
     * Rellenamos el combobox con un arraylist de todas los tipos de
     * trabajadores que tenemos
     */
    private void llenarModeloComboBoxTiposTrabajadores() {
        for (String tipo : listaTipos) {
            modeloTipoTrabajo.addElement(tipo);

        }
    }

    /**
     * Obtenemos todas las cuadrillas de nuestra BD y la guardamos en un
     * arrayList
     */
    private void comprobarCuadrillas() {
        listaCuadrilla = consultas1.comprobarCuadrillas();

    }

    /**
     * Obtenemos todas los tipos de trabajadores de nuestra BD y la guardamos en
     * un arrayList
     */
    private void comprobarTiposTrabajadores() {
        listaTipos = consultas1.comprobarTipos();
    }

    /**
     * Obtenemos todos nuestros trabajadores de nuestra BD y la guardamos en un
     * arrayList
     */
    private void sacarTrabajadoresdeBD() {
        lista_trabajabadores = consultas1.sacarTrabajadoresdeBD();

    }

    /**
     * Se nos actualiza la tabla de trabajadores cuando se acaba un operacion
     */
    private void agregarTrabajador() {
        for (Trabajadores trabajador : lista_trabajabadores) {
            String poda;
            int cod_Trabajador = trabajador.getCod_Trabajador();
            String codigo = String.valueOf(cod_Trabajador);
            int tlfn = trabajador.getTelefono();
            String telefono = String.valueOf(tlfn);
            String nombre = trabajador.getNombre();
            String apellidos = trabajador.getApellidos();
            int cuadrilla = trabajador.getCuadrilla();
            String grupo = String.valueOf(cuadrilla);
            String TipoTrabajador = trabajador.getTipoTrabajador();
            boolean podador = trabajador.isPodador();
            if (podador == false) {
                poda = "No";
            } else {
                poda = "Si";
            }
            String[] jornal = {codigo, nombre, apellidos, telefono, grupo, poda, TipoTrabajador};
            modeloTabla.addRow(jornal);
        }

    }

    /**
     * Preparamos nuestra tabla y agregamos los trabajadores
     */
    private void agregarModeloTabla() {
        String[] datosTrabajador = {"Cod_Trabajador", "Nombre", "Apellidos", "Telefono", "Cuadrilla", "Podador", "Tipo"};
        for (int i = 0; i < datosTrabajador.length; i++) {
            modeloTabla.addColumn(datosTrabajador[i]);
        }
        LimpiarTabla();

        for (Trabajadores trabajador : lista_trabajabadores) {
            String poda;

            int cod_Trabajador = trabajador.getCod_Trabajador();
            String codigo = String.valueOf(cod_Trabajador);
            int tlfn = trabajador.getTelefono();
            String telefono = String.valueOf(tlfn);
            String nombre = trabajador.getNombre();
            String apellidos = trabajador.getApellidos();
            int cuadrilla = trabajador.getCuadrilla();
            String grupo = String.valueOf(cuadrilla);
            String TipoTrabajador = trabajador.getTipoTrabajador();
            boolean podador = trabajador.isPodador();
            if (podador == false) {
                poda = "No";
            } else {
                poda = "Si";
            }
            String[] jornal = {codigo, nombre, apellidos, telefono, grupo, poda, TipoTrabajador};
            modeloTabla.addRow(jornal);
        }

    }

    /**
     * Limpiamos todos los campos
     */
    private void limpiarcajas() {
        cajaCodigo.setText("");
        cajaNombre.setText("");
        cajaApellidos.setText("");
        cajaTelefono.setText("");
        jcomboCuadrilla.setSelectedIndex(0);
        jcomboTipo.setSelectedIndex(0);
    }

    /**
     * Actualizamos la tabla
     */

    private void ActualizarTabla() {
        LimpiarTabla();
        sacarTrabajadoresdeBD();
        agregarTrabajador();

    }
/**
 * Borrado de la Tabla
 */
    public void LimpiarTabla() {
        int lon = modeloTabla.getRowCount();
        for (int i = 0; i < lon; i++) {
            modeloTabla.removeRow(0);

        }
    }

    private void configuracionTabla() {
        
        //Fuente de letra Encabezado 
            th= tabla.getTableHeader();
            Font fuenteencabezado = new Font("Comic", Font.BOLD, 14);
            th.setForeground(Color.WHITE);
            th.setBackground(Color.BLACK);
            th.setFont(fuenteencabezado);
        
        //Fuente de letra Contenido    
        Font fuentecontenido = new Font("Comic", Font.BOLD, 14);
        tabla.setFont(fuentecontenido);        
        
        //Color de Fondo de la tabla
        tabla.setBackground(new Color(colorfondorojo,colorfondoverde,colorfondoazul));
        tabla.setForeground(new Color(colorletrarojo,colorletraverde,colorletraazul));
        tabla.setGridColor(new Color(colorfondorojo,colorfondoverde,colorfondoazul));
        
           
    }

}
